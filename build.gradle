//this file is a mess

plugins {
    id 'idea'
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

group = project.maven_group

allprojects {
    version = "${minecraft_version}-${mod_version}"
}

subprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "me.modmuss50.mod-publish-plugin"

    base.archivesName.set("${mod_id}-${project.name}")

    repositories {
        maven {
            name = "Common Network"
            url = "https://jm.gserv.me/repository/maven-public/"
        }
        maven {
            name = "Spongepowered Mixin"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
        maven {
            name = "CurseMaven" // Jade
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name = "Jared's Maven" // JEI
            url = "https://maven.blamejared.com/"
        }
        maven {
            name = "ModMaven" // JEI Fallback
            url = "https://modmaven.dev"
        }
        maven {
            name = "Shedaniel's Maven" // Cloth Config
            url "https://maven.shedaniel.me/"
        }
        maven {
            name = "TerraformersMC" // Cloth Config Fallback
            url "https://maven.terraformersmc.com/releases/"
        }

        mavenCentral()
    }

    processResources {
        if (project.name != "common") {
            from project(":common").sourceSets.main.resources
        }
        if (project.name.contains("forge")) {
            from project(":fabric").sourceSets.main.resources // So we can use fabric's datagen output
        }

        var expandProps = [
            version                   : project.version,
            mod_id                    : project.mod_id,
            mod_name                  : project.mod_name,
            mod_description           : project.mod_description,
            mod_license               : project.mod_license,
            mod_author                : project.mod_author,
            fabric_loader_version     : project.fabric_loader_version,
            fabric_api_version        : project.fabric_api_version,
            minecraft_version         : project.minecraft_version,
            minecraft_version_range   : project.minecraft_version_range,
            neo_loader_version_range  : project.neo_loader_version_range,
            neo_version_range         : project.neo_version_range,
            forge_loader_version_range: project.forge_loader_version_range,
            forge_version_range       : project.forge_version_range
        ]

        filesMatching(["fabric.mod.json", "META-INF/neoforge.mods.toml", 'META-INF/mods.toml', 'pack.mcmeta']) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    if (project.name.contains("forge")) {
        tasks.withType(JavaCompile).configureEach {
            source(project(":common").sourceSets.main.allSource)
        }
        tasks.withType(Javadoc).configureEach {
            source(project(":common").sourceSets.main.allJava)
        }

        tasks.named("sourcesJar", Jar) {
            from(project(":common").sourceSets.main.allSource)
        }

        compileTestJava { // we don't want/need/use tests rn
            exclude '**/*'
        }
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.base.archivesName.get()}" }
        }
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }
}

project(":fabric").afterEvaluate { // have to put it in here cause else remapJar isn't found
    publishMods {
        type = ALPHA
        changelog = "No changelog specified."

        def modrinthCommon = modrinthOptions {
            accessToken = providers.environmentVariable("MODRINTH_API_KEY")
            projectId = "FNiV0xKx"
            minecraftVersionRange {
                start = "1.21"
                end = "1.21.1"

                includeSnapshots = true
            }
            projectDescription = providers.fileContents(layout.projectDirectory.file("readme.md")).asText.get()

            embeds("common-network")
            optional("cloth-config")
            optional("jei")
        }
        modrinth("modrinthFabric") {
            from modrinthCommon
            modLoaders.add("fabric")
            file = project(":fabric").remapJar.archiveFile

            requires("fabric-api")
            optional("modmenu")
        }
        modrinth("modrinthForge") {
            from modrinthCommon
            modLoaders.add("forge")
            file = project(":forge").jar.archiveFile
        }
        modrinth("modrinthNeoforge") {
            from modrinthCommon
            modLoaders.add("neoforge")
            file = project(":neoforge").jar.archiveFile
        }

        dryRun =
            providers.environmentVariable("MODRINTH_API_KEY").getOrNull() == null
    }
}
