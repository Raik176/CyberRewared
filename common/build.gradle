plugins {
    id "fabric-loom" version "1.7-SNAPSHOT"
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_mappings_version}@zip")
    }

    modImplementation "mysticdrew:common-networking-common:${common_network_version}"

    modApi("me.shedaniel.cloth:cloth-config-forge:${project.cloth_version}") // Forge version should work

    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-common:${jei_version}")

    compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.7'
    //as neoforge and fabric include mixinextras, so can i here
    compileOnly group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'
    annotationProcessor group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
}

sourceSets.main.resources.srcDir 'src/generated/resources'

def aw = file("src/main/resources/${mod_id}.accesswidener")
if (aw.exists()) {
    loom.accessWidenerPath = aw
}

//sourceSets.main.resources.srcDir("src/main/generated")
